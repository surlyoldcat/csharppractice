/*
Highly divisible triangular number
Problem 12 
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEProbs._1to50
{
    public static class Prob12
    {
        public static long Solve(int minDivisors)
        {
            // for help: the formula for a Triangular Number is x_n = n(n+1)/2
            // https://www.mathsisfun.com/algebra/triangular-numbers.html


            //http://www.mathblog.dk/triangle-number-with-more-than-500-divisors/
            var provenPrimes = OptimusPrime.Primes(500000).ToArray();
            long max = (long) Int32.MaxValue + 100;
            var triangles = TriangleNumberGenerator(0, max);
            foreach(long tri in triangles)
            {
                int divisors = FactorizationNumDivisors(tri, provenPrimes);
                if (divisors > minDivisors)
                    return tri;
            }

            return 0;
        }

        private static int FactorizationNumDivisors(long n, long[] primes)
        {
            //perform prime factorization and return number of divisors
            int numDivisors = 1;            
            long remainder = n;

            for (int i = 0; i < primes.Length; i++)
            {
                long prime = primes[i];
                // In case there is a remainder this is a prime factor as well 
                // The exponent of that factor is 1 
                if (prime.Pow(2) > n)
                {
                    return numDivisors * 2;
                }

                //get exponents of facts by dividing down
                int exp = 1;
                while (remainder % prime == 0)
                {
                    exp++;
                    remainder = remainder / prime;
                }
                numDivisors *= exp;

                //If there is no remainder, return the count
                if (remainder == 1)
                {
                    return numDivisors;
                }
            }
            return numDivisors;
        }
        

        public static IEnumerable<long> TriangleNumberGenerator(long seed = 0, long max = long.MaxValue)
        {
            long t = seed;
            long n = 0;
            while (t <= max)
            {
                t += ++n;
                yield return t;
            }
        }
    }
}
