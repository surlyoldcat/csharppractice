/*
Highly divisible triangular number
Problem 12 
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Numerics;
using System.Text;
using System.Threading.Tasks;

namespace ProjectEProbs._1to50
{
    public static class Prob12
    {
        public static BigInteger Solve(int minDivisors)
        {
            // for help: the formula for a Triangular Number is x_n = n(n+1)/2
            // https://www.mathsisfun.com/algebra/triangular-numbers.html

            //and from wikipedia:
            //http://www.mathblog.dk/triangle-number-with-more-than-500-divisors/
    
            var r = Enumerable.Range(1, minDivisors).Select<int, long>(i => i);
    
            BigInteger minProduct = BigProduct(r);
            BigInteger minTriangle = BigTriangleNumbers(0).First(b => b >= minProduct);


            foreach(var tri in BigTriangleNumbers(minTriangle))
            {
                if (HasAtLeastNDivisors(tri, minDivisors))
                    return tri;
            }
            return 0;
        }

        public static BigInteger BigProduct(IEnumerable<long> factors)
        {
            BigInteger p = 1;
            foreach(long i in factors)
            {
                p *= i;
            }
            return p;
        }
        public static bool HasAtLeastNDivisors(BigInteger n, int minDivisors)
        {
            int divisorCount = 0;
            for (BigInteger a = 1; a <= n/2; a++)
            {
                if (n % a == 0)
                {
                    if (++divisorCount >= minDivisors)
                        return true;
                }
            }
            return false;
        }
        
        public static IEnumerable<BigInteger> BigTriangleNumbers(BigInteger seed)
        {
            BigInteger t = seed;
            BigInteger n = 0;
            while(true)
            {
                t += ++n;
                yield return t;
            }
        }

        public static IEnumerable<long> TriangleNumberGenerator(long seed = 0, long max = long.MaxValue)
        {
            long t = seed;
            long n = 0;
            while (t <= max)
            {
                t += ++n;
                yield return t;
            }
        }
    }
}
